# -*- org-confirm-babel-evaluate: nil -*-
* Notes on the go excellent source of knowledge https://github.com/dharrigan/nextjdbc-integrant
** API

*** URI schema
/books
/books/{id}
/books/{id}/author -- ?
/books/{id}/comments

/authors
/authors/{id}
/authors/{id}/comments  -- ? do we need one ?

*** API Investigation
    :PROPERTIES:
    :header-args: :var API="http://localhost:5757/v1"
    :END:

**** books/
***** ctx obj dump
#+begin_src clojure
{:response
 {:headers {},
  :last-modified "Thu, 21 Nov 2019 10:51:46 GMT",
  :vary #{:media-type},
  :produces
  {:media-type
   {:name "text/plain",
    :type "text",
    :subtype "plain",
    :parameters {},
    :quality 0.9}}},
 :properties {:last-modified #inst "2019-11-21T10:51:46.108-00:00"},
 :request
 {:aleph/request-arrived 501626754028580,
  :aleph/keep-alive? true,
  :remote-addr "0:0:0:0:0:0:0:1",
  :params {:id "2"},
  :route-params {:id "2"},
  :headers
  {"sec-fetch-site" "none",
   "host" "localhost:5757",
   "user-agent"
   "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.97 Safari/537.36",
   "cookie"
   "ring-session=4fff676a-286b-44e0-a6fb-3bfb7895f513; secret=e7fd2da7-73fc-4470-bc54-afe6552ba817; PGADMIN_LANGUAGE=en",
   "sec-fetch-user" "?1",
   "connection" "keep-alive",
   "upgrade-insecure-requests" "1",
   "pragma" "no-cache",
   "accept"
   "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3",
   "accept-language" "en-US,en;q=0.9,ru-UA;q=0.8,ru;q=0.7",
   "accept-encoding" "gzip, deflate, br",
   "sec-fetch-mode" "navigate",
   "cache-control" "no-cache"},
  :server-port 5757,
  :uri "/v1/books/2",
  :server-name "localhost",
  :query-string nil,
  :body
  << stream: {:pending-puts 0, :drained? false, :buffer-size 0, :permanent? false, :type "netty", :sink? true, :closed? true, :pending-takes 0, :buffer-capacity 16384, :connection {:local-address "localhost/0:0:0:0:0:0:0:1:5757", :remote-address "/0:0:0:0:0:0:0:1:65400", :writable? true, :readable? true, :closed? false, :direction :inbound}, :source? true} >>,
  :scheme :http,
  :request-method :get},
 :request-id #uuid "5f265c3a-1ded-49a4-8c02-31dc8060b09a",
 :method :get,
 :authorization true,
 :cookies
 {"ring-session" "4fff676a-286b-44e0-a6fb-3bfb7895f513",
  "secret" "e7fd2da7-73fc-4470-bc54-afe6552ba817",
  "PGADMIN_LANGUAGE" "en"},
 :known-methods
 {:*
  #object[yada.methods.AnyMethod 0x51876e58 "yada.methods.AnyMethod@51876e58"],
  :head
  #object[yada.methods.HeadMethod 0x6e5e4e29 "yada.methods.HeadMethod@6e5e4e29"],
  :get
  #object[yada.methods.GetMethod 0x6512bc2b "yada.methods.GetMethod@6512bc2b"],
  :put
  #object[yada.methods.PutMethod 0x81501a5 "yada.methods.PutMethod@81501a5"],
  :post
  #object[yada.methods.PostMethod 0x217afd82 "yada.methods.PostMethod@217afd82"],
  :delete
  #object[yada.methods.DeleteMethod 0x4c4f5309 "yada.methods.DeleteMethod@4c4f5309"],
  :options
  #object[yada.methods.OptionsMethod 0x2108791b "yada.methods.OptionsMethod@2108791b"],
  :trace
  #object[yada.methods.TraceMethod 0x10b22907 "yada.methods.TraceMethod@10b22907"]},
 :produces
 ({:media-type
   {:name "application/edn",
    :type "application",
    :subtype "edn",
    :parameters {},
    :quality 0.7}}
  {:media-type
   {:name "application/json",
    :type "application",
    :subtype "json",
    :parameters {},
    :quality 0.8}}
  {:media-type
   {:name "text/plain",
    :type "text",
    :subtype "plain",
    :parameters {},
    :quality 0.9}}),
 :interceptor-chain
 [#function[yada.interceptors/available?]
  #function[yada.interceptors/known-method?]
  #function[yada.interceptors/uri-too-long?]
  #function[yada.interceptors/TRACE]
  #function[yada.interceptors/method-allowed?]
  #function[yada.swagger-parameters/parse-parameters]
  #function[yada.interceptors/capture-proxy-headers]
  #function[yada.cookies/consume-cookies]
  #function[yada.security/authenticate]
  #function[yada.interceptors/get-properties]
  #function[yada.security/authorize]
  #function[yada.interceptors/process-content-encoding]
  #function[yada.interceptors/process-request-body]
  #function[yada.interceptors/check-modification-time]
  #function[yada.interceptors/select-representation]
  #function[yada.interceptors/if-match]
  #function[yada.interceptors/if-none-match]
  #function[yada.interceptors/invoke-method]
  #function[yada.interceptors/get-new-properties]
  #function[yada.interceptors/compute-etag]
  #function[yada.security/access-control-headers]
  #function[yada.security/security-headers]
  #function[yada.interceptors/create-response]
  #function[yada.interceptors/logging]
  #function[yada.interceptors/return]],
 :uri-info #function[bidi.vhosts/find-handler/fn--24608/fn--24616],
 :allowed-methods #{:get :head :options},
 :route-params {:id "2"},
 :method-wrapper
 #object[yada.methods.GetMethod 0x6512bc2b "yada.methods.GetMethod@6512bc2b"],
 :yada.context/cache #<Atom@63302a44: {}>,
 :id :wiz.blog.api.core/books,
 :resource
 {:produces
  [{:media-type
    {:name "application/edn",
     :type "application",
     :subtype "edn",
     :parameters {},
     :quality 0.7}}
   {:media-type
    {:name "application/json",
     :type "application",
     :subtype "json",
     :parameters {},
     :quality 0.8}}
   {:media-type
    {:name "text/plain",
     :type "text",
     :subtype "plain",
     :parameters {},
     :quality 0.9}}],
  :properties {:last-modified #inst "2019-11-21T10:51:46.108-00:00"},
  :id :wiz.blog.api.core/books,
  :description "Full book info",
  :methods
  {:get {:response #function[wiz.blog.api.core/books/fn--62859]}},
  :show-stack-traces? true},
 :error-interceptor-chain
 [#function[yada.security/access-control-headers]
  #function[yada.interceptors/create-response]
  #function[yada.interceptors/logging]
  #function[yada.interceptors/return]],
 :parameters {:path {:id "2"}}}
#+end_src      
***** get all books
  #+NAME: get-books
  #+BEGIN_SRC shell :var uri="${API}" :results verbatim :cache no
  curl -sv "$API/books?order=id"
  #+END_SRC

  #+RESULTS: get-books
  : ({:id 1, :title "Db Book of all Books"}
  :  {:id 4, :title "Event logigns in s UI systems"}
  :  {:id 5, :title "Awareness"}
  :  {:id 6, :title "Cookbook v1"}
  :  {:id 25, :title "Copy book v11"}
  :  {:id 26, :title "Cookbook v2"})
***** get book
  #+NAME: get-book 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -vs "${API}/books/1" \
         -H 'Accept: text/plain, application/edn;q=0.9'
  #+end_src

  #+RESULTS: get-book
  : {:id 1,
  :  :name "Vlad",
  :  :email "vald@kot.com",
  :  :nickname "vladkotu",
  :  :biography nil,
  :  :created_at #inst "2019-11-19T12:15:28.084882000-00:00"}
***** create book
  #+NAME: create-book 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -X POST -vs "${API}/books" \
         -H 'Accept: text/plain, application/edn;q=0.9' \
         -H 'Content-Type: application/edn'             \
         -d '{:title "Cookbook v2" :author-id 2}'
 #+end_src

  #+RESULTS: create-book
  : {:message "Entity already exists"}
  : 
***** delete book
  #+NAME: delete-book 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -X DELETE -vsi "${API}/books/25"                \
         -H 'Accept: text/plain, application/edn;q=0.9' \
         -H 'Content-Type: application/edn'             \
 #+end_src

 #+RESULTS: delete-book
 #+begin_example
 HTTP/1.1 404 Not Found
 X-Frame-Options: SAMEORIGIN
 X-XSS-Protection: 1; mode=block
 X-Content-Type-Options: nosniff
 Content-Length: 25
 Content-Type: text/plain
 Last-Modified: Tue, 26 Nov 2019 18:01:20 GMT
 Vary: accept
 Server: Aleph/0.4.4
 Connection: Keep-Alive
 Date: Tue, 26 Nov 2019 18:12:58 GMT
 
 {:message "not-exists"}

 #+end_example

***** not found
  #+NAME: not-found 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -vsi "${API}/books/1000" \
         -H 'Accept: application/edn;q=0.9'
  #+end_src

  #+RESULTS: not-found
  #+begin_example
  HTTP/1.1 404 Not Found
  X-Frame-Options: SAMEORIGIN
  X-XSS-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Length: 23
  Content-Type: application/edn
  Last-Modified: Mon, 25 Nov 2019 12:31:47 GMT
  Vary: accept
  Server: Aleph/0.4.4
  Connection: Keep-Alive
  Date: Mon, 25 Nov 2019 12:34:13 GMT
  
  {:message "Not found"}
  #+end_example

**** authors/
***** get all authors
  #+NAME: get-authors
  #+BEGIN_SRC shell :var uri="${API}" :results verbatim :cache no
  curl -sv "$API/authors?limit=3&order=email|ASC"
  #+END_SRC

  #+RESULTS: get-authors
  : ({:id 1, :name "Vlad", :nickname "vladkotu", :email "vald@kot.com"}
  :  {:id 2, :name "Ivan", :nickname "ivanko", :email "ivan@ttt.com"}
  :  {:id 3, :name "Svetlana", :nickname "svenlo", :email "svet@ttt.com"})

***** get author
  #+NAME: get-author
  #+BEGIN_SRC shell :results verbatim
  curl -sv "$API/authors/3"
  #+END_SRC

  #+RESULTS: get-author
  : {:id 3,
  :  :name "Svetlana",
  :  :email "svet@ttt.com",
  :  :nickname "svenlo",
  :  :biography nil,
  :  :created_at #inst "2019-11-19T12:22:11.680514000-00:00"}

***** author not found
  #+NAME: author-not-found
  #+BEGIN_SRC shell :results verbatim
  curl -svi "$API/authors/1000" \
       -H   "Accept: application/json"
  #+END_SRC

  #+RESULTS: author-not-found
  #+begin_example
  HTTP/1.1 404 Not Found
  X-Frame-Options: SAMEORIGIN
  X-XSS-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Length: 24
  Content-Type: application/json
  Last-Modified: Mon, 25 Nov 2019 12:31:47 GMT
  Vary: accept
  Server: Aleph/0.4.4
  Connection: Keep-Alive
  Date: Mon, 25 Nov 2019 12:35:01 GMT
  
  {"message":"Not found"}
  #+end_example
  
***** create author
   #+NAME: create-author 
   #+begin_src sh :results verbatim
     # exec 2>&1
     curl -X POST -vsi "${API}/authors" \
          -H 'Accept: text/plain, application/edn;q=0.9' \
          -H 'Content-Type: application/edn'             \
          -d '{:name "Li2" :email "li2@bisss.com" :nickname "L" :biography nil}'
  #+end_src

  #+RESULTS: create-author
  #+begin_example
  HTTP/1.1 200 OK
  X-Frame-Options: SAMEORIGIN
  X-XSS-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Length: 139
  Content-Type: text/plain
  Last-Modified: Tue, 26 Nov 2019 13:10:41 GMT
  Vary: accept
  Server: Aleph/0.4.4
  Connection: Keep-Alive
  Date: Tue, 26 Nov 2019 13:11:47 GMT
  
  {:id 6,
   :name "Li2",
   :email "li2@bisss.com",
   :nickname "L",
   :biography nil,
   :created_at #inst "2019-11-26T13:11:47.628707000-00:00"}
  #+end_example
***** delete author
  #+NAME: delete-author 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -X DELETE -vsi "${API}/authors/2"                \
         -H 'Accept: text/plain, application/edn;q=0.9' \
         -H 'Content-Type: application/edn'             \
 #+end_src

**** comments/
***** get all comments
  #+NAME: get-comments
  #+BEGIN_SRC shell :var uri="${API}" :results verbatim :cache no
  curl -sv "$API/comments?limit=2" \
       -H  "Accept: text/plain"
  #+END_SRC

  #+RESULTS: get-comments
  : ({:id 2, :message "mee too"}
  :  {:id 1, :message "love books about dbs and this one especially"})

***** get comment
  #+NAME: get-comment
  #+BEGIN_SRC shell :results verbatim
  curl -sv "$API/comments/3"
  #+END_SRC

  #+RESULTS: get-comment
  : {:id 3,
  :  :message "lets learn db",
  :  :author_id 3,
  :  :book_id 1,
  :  :created_at #inst "2019-11-19T20:20:42.790065000-00:00"}
 
***** create comment
  #+NAME: create-comment
  #+BEGIN_SRC shell :results verbatim
  # exec 2>&1
  curl -X POST -vs "${API}/comments"                \
      -H 'Accept: text/plain, application/edn;q=0.9' \
      -H 'Content-Type: application/edn'             \
      -d '{:message "char from curl" :author-id 2 :book-id 1}'
  #+END_SRC

  #+RESULTS: create-comment
  : {:id 10,
  :  :message "char from curl",
  :  :author_id 2,
  :  :book_id 1,
  :  :created_at #inst "2019-11-26T14:06:30.855153000-00:00"}
  : 

***** comment not found
  #+NAME: comment-not-found
  #+BEGIN_SRC shell :results verbatim
  curl -svi "$API/comments/0" \
       -H   "Accept: application/json"
  #+END_SRC

  #+RESULTS: comment-not-found
  #+begin_example
  HTTP/1.1 404 Not Found
  X-Frame-Options: SAMEORIGIN
  X-XSS-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Length: 24
  Content-Type: application/json
  Last-Modified: Thu, 21 Nov 2019 18:00:25 GMT
  Vary: accept
  Server: Aleph/0.4.4
  Connection: Keep-Alive
  Date: Thu, 21 Nov 2019 18:12:41 GMT
  
  {"message":"Not found"}
  #+end_example

***** delete comment
  #+NAME: delete-comment 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -X DELETE -vsi "${API}/comments/2"                \
         -H 'Accept: text/plain, application/edn;q=0.9' \
         -H 'Content-Type: application/edn'             \
 #+end_src
** ENV
   couldn't find a way to reuse environment variables in app config and
   docker-compose mostly becsause clojure when running do not respect local env
   variables setting local variables do not work neither by sourcing key val
   pairs from .env file nor by using dotenv plugin for emacs (had hope cider
   would catch them up)
   sh -ac 'source .env && clojure -A:dev' - do not work as well
   only thing is working - DB_USER=user clojure -A:dev - which obviously would
   not work as at least 10 variables should be passed
     - [!] pass host secrets to docker image and app form env
   
   Currently to configure things in a dev mode (mac os involved) 
   We have to save copy of env vars in a .env file (it still works for docker-compose)
   and inside aero confg (secrets.edn)
   
** DB
*** up and running [100%]
     - [X] create docker-compose file
      [[file:wiz.blog.api/docker-compose.yml::version:%20"3"][docker-compose.yml]] 
     - [X] run container
       #+begin_src 
         docker-compose up -d
       #+end_src
     - [X] test connection from terminal
       #+begin_src 
 psql -h localhost -p 54320 -U vladkotu -d blog_db
       #+end_src
     - [X] connect form app
     - [X] create scheme
     - [X] apply scheme
**** [%] migrations
     - [ ] what migration libs are exists?

*** check your data with pgadmin [0%]
    - [ ] add dpage/pgadmin to docker compose
    - [ ] connect to app db
    - [ ] restrict pgadmin to start only in dev mode
    
*** queries

**** investigate bug with order being not applied dynamically
 #+name: my-query
 #+header: :engine postgresql
 #+header: :dbhost localhost
 #+header: :dbport 54320
 #+header: :dbuser vladkotu
 #+header: :dbpassword pwd123
 #+header: :database blog_db
 #+begin_src sql
   SELECT id, message FROM comments
   ORDER BY id DESC
 #+end_src

 #+RESULTS: my-query
 | id | message                                      |
 |----+----------------------------------------------|
 |  6 | much better name - stop it                   |
 |  5 | i feel pain - fix it                         |
 |  4 | who is psyho here?                           |
 |  3 | lets learn db                                |
 |  2 | mee too                                      |
 |  1 | love books about dbs and this one especially |

 #+begin_src clojure :results pp
   (def db {:dbtype "postgresql", :user "vladkotu", :password "pwd123", :dbname "blog_db", :port 54320, :host "localhost"})
   (require '[hugsql.core :as hugsql])

   (hugsql/def-sqlvec-fns "wiz/blog/api/db/sql/comments.sql")
   (hugsql/def-db-fns "wiz/blog/api/db/sql/comments.sql")

   {:sql (wiz.blog.api.db.comments/select-all-sqlvec {:order "id"})
    :res (wiz.blog.api.db.comments/select-all db {:order "id"})}
 #+end_src

 #+RESULTS:
 : {:sql ["SELECT id, message\nFROM comments\n\n\nORDER BY id DESC"],
 :  :res
 :  ({:id 6, :message "much better name - stop it"}
 :   {:id 5, :message "i feel pain - fix it"}
 :   {:id 4, :message "who is psyho here?"}
 :   {:id 3, :message "lets learn db"}
 :   {:id 2, :message "mee too"}
 :   {:id 1, :message "love books about dbs and this one especially"})}
 
**** insert if not exists

 #+name: insert-if-not-exists
 #+header: :engine postgresql
 #+header: :dbhost localhost
 #+header: :dbport 54320
 #+header: :dbuser vladkotu
 #+header: :dbpassword pwd123
 #+header: :database blog_db
 #+begin_src sql
DELETE from books WHERE id > 6
 #+end_src

 #+name: insert-if-not-exists
 #+header: :engine postgresql
 #+header: :dbhost localhost
 #+header: :dbport 54320
 #+header: :dbuser vladkotu
 #+header: :dbpassword pwd123
 #+header: :database blog_db
 #+begin_src sql
INSERT
INTO
	books (title, author_id)
SELECT
	'Copy book v2', 2
WHERE
	NOT EXISTS(SELECT 1 FROM books WHERE title = 'Copy book v2' AND author_id = 2)   -- VALUES ('Copy book', 2);
RETURNING id, title

 #+end_src

 #+RESULTS: insert-if-not-exists
 | DELETE 18 |
 |-----------|

** Quiz
*** How to write to STDOUT but not only to logs?
    seems like simple println works
*** how to read config values inside application?
