# -*- org-confirm-babel-evaluate: nil -*-
* Notes on the go
excellent source of knowledge https://github.com/dharrigan/nextjdbc-integrant

** API

*** URI schema
/books
/books/{id}
/books/{id}/author -- ?
/books/{id}/comments

/authors
/authors/{id}
/authors/{id}/comments  -- ? do we need one ?

*** API Investigation
    :PROPERTIES:
    :header-args: :var API="http://localhost:5757/v1"
    :END:

**** endpoint debug dump
 #+NAME: curl-version
 #+begin_src sh
   curl --version
   which curl
 #+end_src

 #+begin_src sh :results verbatim
   # curl --head "${API}/books"
   # exec 2>&1
   curl -vsi "${API}/books/22?q=1"  \
        -H 'Connection: keep-alive' \
        -H 'Accept: text/plain, application/edn;q=0.9'
        # -H 'Content-type: application/edn' \
        # -H "Accept-Charset: UTF-8"
 #+end_src

 #+RESULTS:
 #+begin_example
 HTTP/1.1 404 Not Found
 X-Frame-Options: SAMEORIGIN
 X-XSS-Protection: 1; mode=block
 X-Content-Type-Options: nosniff
 Content-Length: 24
 Content-Type: text/plain
 Last-Modified: Thu, 21 Nov 2019 10:32:07 GMT
 Vary: accept
 Server: Aleph/0.4.4
 Connection: Keep-Alive
 Date: Thu, 21 Nov 2019 10:37:07 GMT
 
 {:message "Not found"}

 #+end_example



**** books/
 
***** get all books   
  #+NAME: get-books
  #+BEGIN_SRC shell :var uri="${API}" :results verbatim :cache no
  curl -sv "$API/books"
  #+END_SRC

  #+RESULTS: get-books
  : ({:id 1, :title "Db Book of all Books"}
  :  {:id 2, :title "Psyho Self control"}
  :  {:id 3, :title "RDBMS coockbook"}
  :  {:id 4, :title "Event logigns in s UI systems"}
  :  {:id 5, :title "Awareness"})

***** get whole book
  #+NAME: get-book 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -vs "${API}/books/1" \
         -H 'Accept: text/plain, application/edn;q=0.9'
  #+end_src

  #+RESULTS: get-book
  : {:id 1,
  :  :title "Db Book of all Books",
  :  :author_id 1,
  :  :created_at #inst "2019-11-19T19:47:06.767703000-00:00"}

***** single book not found
  #+NAME: not-found 
  #+begin_src sh :results verbatim
    # exec 2>&1
    curl -vsi "${API}/books/0" \
         -H 'Accept: text/plain, application/edn;q=0.9'
  #+end_src

  #+RESULTS: not-found
  #+begin_example
  HTTP/1.1 404 Not Found
  X-Frame-Options: SAMEORIGIN
  X-XSS-Protection: 1; mode=block
  X-Content-Type-Options: nosniff
  Content-Length: 24
  Content-Type: text/plain
  Last-Modified: Thu, 21 Nov 2019 10:32:07 GMT
  Vary: accept
  Server: Aleph/0.4.4
  Connection: Keep-Alive
  Date: Thu, 21 Nov 2019 10:38:20 GMT
 
  {:message "Not found"}

  #+end_example

** ENV
   couldn't find a way to reuse environment variables in app config and
   docker-compose mostly becsause clojure when running do not respect local env
   variables setting local variables do not work neither by sourcing key val
   pairs from .env file nor by using dotenv plugin for emacs (had hope cider
   would catch them up)
   sh -ac 'source .env && clojure -A:dev' - do not work as well
   only thing is working - DB_USER=user clojure -A:dev - which obviously would
   not work as at least 10 variables should be passed
     - [!] pass host secrets to docker image and app form env
   
   Currently to configure things in a dev mode (mac os involved) 
   We have to save copy of env vars in a .env file (it still works for docker-compose)
   and inside aero confg (secrets.edn)
   
** DB
*** up and running [100%]
     - [X] create docker-compose file
      [[file:wiz.blog.api/docker-compose.yml::version:%20"3"][docker-compose.yml]] 
     - [X] run container
       #+begin_src 
         docker-compose up -d
       #+end_src
     - [X] test connection from terminal
       #+begin_src 
 psql -h localhost -p 54320 -U vladkotu -d blog_db
       #+end_src
     - [X] connect form app
     - [X] create scheme
     - [X] apply scheme
**** [%] migrations
     - [ ] what migration libs are exists?

*** check your data with pgadmin [0%]
    - [ ] add dpage/pgadmin to docker compose
    - [ ] connect to app db
    - [ ] restrict pgadmin to start only in dev mode
    
** Quiz
*** How to write to STDOUT but not only to logs?
    seems like simple println works
*** how to read config values inside application?
